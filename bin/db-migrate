#!/usr/bin/env node

var assert = require('assert');
var fs = require('fs');
var path = require('path');
var util = require('util');
var mkdirp = require('mkdirp');
var nomnom = require('nomnom');
var config = require('../lib/config.js');
var index = require('../index');
var log = require('../lib/log');
var pkginfo = require('pkginfo')(module, 'version');
var dotenv = require('dotenv');

//global declaration for detection like it's done in umigrate
dbm = require( '../' );
async = require( 'async' );

dotenv.load();

process.on('uncaughtException', function(err) {
  log.error(err.stack);
  process.exit(1);
});

var argv = nomnom
  .script('db-migrate')
  .option('[up|down|reset|create|db] [[dbname/]migrationName|all]', {
    position: 0
  })
  .option('env', {
    abbr: 'e',
    full: 'env',
    default: 'dev',
    help: 'The environment to run the migrations under (dev, test, prod).'
  })
  .option('migrations-dir', {
    abbr: 'm',
    full: 'migrations-dir',
    default: process.cwd() + '/migrations',
    help: 'The directory containing your migration files.'
  })
  .option('count', {
    abbr: 'c',
    full: 'count',
    help: 'Max number of migrations to run.'
  })
  .option('dry-run', {
    full: 'dry-run',
    flag: true,
    default: false,
    help: 'Prints the SQL but doesn\'t run it.',
    callback: function() {
      log.info('dry run');
    }
  })
  .option('force-exit', {
    full: 'force-exit',
    flag: true,
    default: false,
    help: 'Forcibly exit the migration process on completion.',
    callback: function() {
      log.verbose('Forcing exit');
      process.exit(0);
    }
  })
  .option('verbose', {
    abbr: 'v',
    full: 'verbose',
    default: false,
    flag: true,
    help: 'Verbose mode.'
  })
  .option('version', {
    abbr: 'i',
    full: 'version',
    flag: true,
    help: 'Print version info.',
    callback: function() {
      return module.exports.version;
    }
  })
  .option('config', {
    full: 'config',
    default: process.cwd() + '/database.json',
    help: 'Location of the database.json file.'
  })
  .option('sql-file', {
    full: 'sql-file',
    flag: true,
    default: false,
    help: 'Automatically create two sql files for up and down statements in /sqls and generate the javascript code that loads them.'
  })
  .option('coffee-file', {
    full: 'coffee-file',
    flag: true,
    default: false,
    help: 'Create a coffeescript migration file'
  })
  .option('migration-table', {
    abbr: 't',
    full: 'migration-table',
    default: 'migrations',
    help: 'Set the name of the migration table, which stores the migration history.'
  })
  .parse();

// If no args were passed in
if (argv._.length === 0) {
  var exec = require('child_process').exec;
  exec('db-migrate -h', function (error, stdout, stderr) {
    log.info(stdout);
    process.exit(1);
  });
} else {
  run();
}

global.migrationTable = argv.table;
global.dbm = dbm;
global.matching = '';
global.mode;
global.verbose = argv.verbose;
global.dryRun = argv['dry-run'];

function createMigrationDir(dir, callback) {
  fs.stat(dir, function(err, stat) {
    if (err) {
      mkdirp(dir, callback);
    } else {
      callback();
    }
  });
}

function loadConfig() {
  if (process.env.DATABASE_URL) {
    config.loadUrl(process.env.DATABASE_URL, argv.env);
  } else {
    config.load(argv.config, argv.env);
  }
  if(global.verbose) {
    var current = config.getCurrent();
    var s = JSON.parse(JSON.stringify(current.settings));

    if (s["password"])
      s["password"] = "******";

    log.info('Using', current.env, 'settings:', s);
  }
}

function executeCreate() {
  var folder, path;

  if(argv._.length === 0) {
    log.error('\'migrationName\' is required.');
    optimist.showHelp();
    process.exit(1);
  }

  createMigrationDir(argv['migrations-dir'], function(err) {
    if (err) {
      log.error('Failed to create migration directory at ', argv['migrations-dir'], err);
      process.exit(1);
    }

    argv.title = argv._.shift();
    folder = argv.title.split('/');

    argv.title = folder[folder.length - 2] || folder[0];
    path = argv['migrations-dir'];

    if(folder.length > 1) {

      path += '/';

      for(var i = 0; i < folder.length - 1; ++i) {

        path += folder[i] + '/';
      }
    }

    var templateType = Migration.TemplateType.DEFAULT_JS;
    if (shouldCreateSqlFiles()) {
      templateType = Migration.TemplateType.SQL_FILE_LOADER;
    } else if (shouldCreateCoffeeFile()) {
      templateType = Migration.TemplateType.DEFAULT_COFFEE;
    }
    var migration = new Migration(argv.title + (shouldCreateCoffeeFile() ? '.coffee' : '.js'), path, new Date(), templateType);
    index.createMigration(migration, function(err, migration) {
      assert.ifError(err);
      log.info(util.format('Created migration at %s', migration.path));
    });
  });

  if (shouldCreateSqlFiles()) {
    createSqlFiles();
  }
}

function shouldCreateSqlFiles() {
  return argv['sql-file'] || config['sql-file'];
}

function shouldCreateCoffeeFile() {
  return argv['coffee-file'] || config['coffee-file'];
}

function createSqlFiles() {
  var sqlDir = argv['migrations-dir'] + '/sqls';
  createMigrationDir(sqlDir, function(err) {
    if (err) {
      log.error('Failed to create migration directory at ', sqlDir, err);
      process.exit(1);
    }

    var templateTypeDefaultSQL = Migration.TemplateType.DEFAULT_SQL;
    var migrationUpSQL = new Migration(argv.title + '-up.sql', sqlDir, new Date(), templateTypeDefaultSQL);
    index.createMigration(migrationUpSQL, function(err, migration) {
      assert.ifError(err);
      log.info(util.format('Created migration up sql file at %s', migration.path));
    });
    var migrationDownSQL = new Migration(argv.title + '-down.sql', sqlDir, new Date(), templateTypeDefaultSQL);
    index.createMigration(migrationDownSQL, function(err, migration) {
      assert.ifError(err);
      log.info(util.format('Created migration down sql file at %s', migration.path));
    });
  });
}

function executeUp() {

  if(!argv.count) {
    argv.count = Number.MAX_VALUE;
  }

  index.connect(config.getCurrent().settings, function(err, migrator) {
    assert.ifError(err);

    if(global.locTitle)
        migrator.migrationsDir = path.resolve(argv['migrations-dir'], global.locTitle);
    else
      migrator.migrationsDir = path.resolve(argv['migrations-dir']);

    migrator.driver.createMigrationsTable(function(err) {
      assert.ifError(err);
      log.verbose('migration table created');
      migrator.up(argv, onComplete.bind(this, migrator));
    });
  });
}

function executeDown() {

  if(!argv.count) {
    log.info('Defaulting to running 1 down migration.');
    argv.count = 1;
  }

  index.connect(config.getCurrent().settings, function(err, migrator) {
    assert.ifError(err);

    migrator.migrationsDir = path.resolve(argv['migrations-dir']);

    migrator.driver.createMigrationsTable(function(err) {
      assert.ifError(err);
      migrator.down(argv, onComplete.bind(this, migrator));
    });
  });
}

function executeDB() {

  if(argv._.length > 0) {
    argv.dbname = argv._.shift().toString();
  }
  else {

    log.info('Error: You must enter a database name!');
    return;
  }

  index.driver(config.getCurrent().settings, function(err, db)
  {
    if(global.mode === 'create')
    {
      db.createDatabase(argv.dbname, { ifNotExists: true }, function()
      {
        if(err) {
          log.info('Error: Failed to create database!');
        }
        else {
          log.info('Created database "' + argv.dbname + '"');
        }

        db.close();
      });
    }
    else if(global.mode === 'drop')
    {
      db.dropDatabase(argv.dbname, { ifExists: true }, function()
      {
        if(err) {
          log.info('Error: Failed to drop database!');
        }
        else {
          log.info('Deleted database "' + argv.dbname + '"');
        }

        db.close();
      });
    }
    else
      return;
  });

}

function onComplete(migrator, originalErr) {
  migrator.driver.close(function(err) {
    assert.ifError(originalErr);
    assert.ifError(err);
    log.info('Done');
  });
}

function run() {
  var action = argv._.shift(),
      folder = action.split(':');

  action = folder[0];

  switch(action) {
    case 'create':
      loadConfig();
      executeCreate();
      break;
    case 'up':
    case 'down':
    case 'reset':
      loadConfig();

      if(action === 'reset')
        argv.count = Number.MAX_VALUE;

      if(argv._.length > 0) {
        if (action === 'down') {
          log.info('Ignoring migration name for down migrations.  Use --count to control how many down migrations are run.');
          argv.destination = null;
        } else {
          argv.destination = argv._.shift().toString();
        }
      }

      if(folder[1])
      {
        global.matching = folder[1];
        global.migrationMode = folder[1];
      }

      if(action == 'up') {
        executeUp();
      } else {
        executeDown();
      }
      break;

    case 'db':
      loadConfig();

      if(folder.length < 1) {

        log.info('Please enter a valid command, i.e. db:create|db:drop');
      }
      else {

        global.mode = folder[1];
        executeDB();
      }
    break;

    default:
      log.error('Invalid Action: Must be [up|down|create].');
      optimist.showHelp();
      process.exit(1);
      break;
  }
}
